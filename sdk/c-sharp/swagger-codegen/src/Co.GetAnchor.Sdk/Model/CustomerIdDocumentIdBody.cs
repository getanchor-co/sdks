/* 
 * Anchor API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Co.GetAnchor.Sdk.Client.SwaggerDateConverter;

namespace Co.GetAnchor.Sdk.Model
{
    /// <summary>
    /// CustomerIdDocumentIdBody
    /// </summary>
    [DataContract]
        public partial class CustomerIdDocumentIdBody :  IEquatable<CustomerIdDocumentIdBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerIdDocumentIdBody" /> class.
        /// </summary>
        /// <param name="fileData">fileData.</param>
        /// <param name="textData">textData.</param>
        public CustomerIdDocumentIdBody(byte[] fileData = default(byte[]), string textData = default(string))
        {
            this.FileData = fileData;
            this.TextData = textData;
        }
        
        /// <summary>
        /// Gets or Sets FileData
        /// </summary>
        [DataMember(Name="fileData", EmitDefaultValue=false)]
        public byte[] FileData { get; set; }

        /// <summary>
        /// Gets or Sets TextData
        /// </summary>
        [DataMember(Name="textData", EmitDefaultValue=false)]
        public string TextData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerIdDocumentIdBody {\n");
            sb.Append("  FileData: ").Append(FileData).Append("\n");
            sb.Append("  TextData: ").Append(TextData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerIdDocumentIdBody);
        }

        /// <summary>
        /// Returns true if CustomerIdDocumentIdBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerIdDocumentIdBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerIdDocumentIdBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileData == input.FileData ||
                    (this.FileData != null &&
                    this.FileData.Equals(input.FileData))
                ) && 
                (
                    this.TextData == input.TextData ||
                    (this.TextData != null &&
                    this.TextData.Equals(input.TextData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileData != null)
                    hashCode = hashCode * 59 + this.FileData.GetHashCode();
                if (this.TextData != null)
                    hashCode = hashCode * 59 + this.TextData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
