/* 
 * Anchor API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Co.GetAnchor.Sdk.Client;

namespace Co.GetAnchor.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICustomersDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch Customer Document By DocumentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Object</returns>
        Object ApiV1DocumentsCustomerIdDocumentIdGet (string customerId, string documentId);

        /// <summary>
        /// Fetch Customer Document By DocumentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV1DocumentsCustomerIdDocumentIdGetWithHttpInfo (string customerId, string documentId);
        /// <summary>
        /// List Customer Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Object</returns>
        Object ApiV1DocumentsCustomerIdGet (string customerId);

        /// <summary>
        /// List Customer Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV1DocumentsCustomerIdGetWithHttpInfo (string customerId);
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Object</returns>
        Object ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet (string customerId, string documentId);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetWithHttpInfo (string customerId, string documentId);
        /// <summary>
        /// Upload Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns></returns>
        void ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost (string customerId, string documentId, byte[] fileData = null, string textData = null);

        /// <summary>
        /// Upload Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostWithHttpInfo (string customerId, string documentId, byte[] fileData = null, string textData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch Customer Document By DocumentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV1DocumentsCustomerIdDocumentIdGetAsync (string customerId, string documentId);

        /// <summary>
        /// Fetch Customer Document By DocumentId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsCustomerIdDocumentIdGetAsyncWithHttpInfo (string customerId, string documentId);
        /// <summary>
        /// List Customer Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV1DocumentsCustomerIdGetAsync (string customerId);

        /// <summary>
        /// List Customer Documents
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsCustomerIdGetAsyncWithHttpInfo (string customerId);
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetAsync (string customerId, string documentId);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetAsyncWithHttpInfo (string customerId, string documentId);
        /// <summary>
        /// Upload Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostAsync (string customerId, string documentId, byte[] fileData = null, string textData = null);

        /// <summary>
        /// Upload Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostAsyncWithHttpInfo (string customerId, string documentId, byte[] fileData = null, string textData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CustomersDocumentsApi : ICustomersDocumentsApi
    {
        private Co.GetAnchor.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersDocumentsApi(String basePath)
        {
            this.Configuration = new Co.GetAnchor.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Co.GetAnchor.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersDocumentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CustomersDocumentsApi()
        {
            this.Configuration = Co.GetAnchor.Sdk.Client.Configuration.Default;

            ExceptionFactory = Co.GetAnchor.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersDocumentsApi(Co.GetAnchor.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Co.GetAnchor.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Co.GetAnchor.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Co.GetAnchor.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Co.GetAnchor.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch Customer Document By DocumentId 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Object</returns>
        public Object ApiV1DocumentsCustomerIdDocumentIdGet (string customerId, string documentId)
        {
             ApiResponse<Object> localVarResponse = ApiV1DocumentsCustomerIdDocumentIdGetWithHttpInfo(customerId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Customer Document By DocumentId 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApiV1DocumentsCustomerIdDocumentIdGetWithHttpInfo (string customerId, string documentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdDocumentIdGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdDocumentIdGet");

            var localVarPath = "/api/v1/documents/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsCustomerIdDocumentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Fetch Customer Document By DocumentId 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV1DocumentsCustomerIdDocumentIdGetAsync (string customerId, string documentId)
        {
             ApiResponse<Object> localVarResponse = await ApiV1DocumentsCustomerIdDocumentIdGetAsyncWithHttpInfo(customerId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Customer Document By DocumentId 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsCustomerIdDocumentIdGetAsyncWithHttpInfo (string customerId, string documentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdDocumentIdGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdDocumentIdGet");

            var localVarPath = "/api/v1/documents/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsCustomerIdDocumentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List Customer Documents 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Object</returns>
        public Object ApiV1DocumentsCustomerIdGet (string customerId)
        {
             ApiResponse<Object> localVarResponse = ApiV1DocumentsCustomerIdGetWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer Documents 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApiV1DocumentsCustomerIdGetWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdGet");

            var localVarPath = "/api/v1/documents/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsCustomerIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List Customer Documents 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV1DocumentsCustomerIdGetAsync (string customerId)
        {
             ApiResponse<Object> localVarResponse = await ApiV1DocumentsCustomerIdGetAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Customer Documents 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsCustomerIdGetAsyncWithHttpInfo (string customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsCustomerIdGet");

            var localVarPath = "/api/v1/documents/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsCustomerIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Download Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Object</returns>
        public Object ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet (string customerId, string documentId)
        {
             ApiResponse<Object> localVarResponse = ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetWithHttpInfo(customerId, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetWithHttpInfo (string customerId, string documentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet");

            var localVarPath = "/api/v1/documents/download-document/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Download Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetAsync (string customerId, string documentId)
        {
             ApiResponse<Object> localVarResponse = await ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetAsyncWithHttpInfo(customerId, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGetAsyncWithHttpInfo (string customerId, string documentId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet");

            var localVarPath = "/api/v1/documents/download-document/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsDownloadDocumentCustomerIdDocumentIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Upload Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns></returns>
        public void ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost (string customerId, string documentId, byte[] fileData = null, string textData = null)
        {
             ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostWithHttpInfo(customerId, documentId, fileData, textData);
        }

        /// <summary>
        /// Upload Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostWithHttpInfo (string customerId, string documentId, byte[] fileData = null, string textData = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost");

            var localVarPath = "/api/v1/documents/upload-document/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (fileData != null) localVarFileParams.Add("fileData", this.Configuration.ApiClient.ParameterToFile("fileData", fileData));
            if (textData != null) localVarFormParams.Add("textData", this.Configuration.ApiClient.ParameterToString(textData)); // form parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostAsync (string customerId, string documentId, byte[] fileData = null, string textData = null)
        {
             await ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostAsyncWithHttpInfo(customerId, documentId, fileData, textData);

        }

        /// <summary>
        /// Upload Document 
        /// </summary>
        /// <exception cref="Co.GetAnchor.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <param name="documentId"></param>
        /// <param name="fileData"> (optional)</param>
        /// <param name="textData"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPostAsyncWithHttpInfo (string customerId, string documentId, byte[] fileData = null, string textData = null)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling CustomersDocumentsApi->ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling CustomersDocumentsApi->ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost");

            var localVarPath = "/api/v1/documents/upload-document/{customerId}/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (fileData != null) localVarFileParams.Add("fileData", this.Configuration.ApiClient.ParameterToFile("fileData", fileData));
            if (textData != null) localVarFormParams.Add("textData", this.Configuration.ApiClient.ParameterToString(textData)); // form parameter
            // authentication (apikeyAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1DocumentsUploadDocumentCustomerIdDocumentIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
